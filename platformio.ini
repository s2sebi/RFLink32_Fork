; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = RFLink

[env]
framework = arduino
monitor_speed = 115200
lib_ldf_mode = deep

[common]
ESPlibs =
    PubSubClient
    ArduinoJson@~6.18.5
    Wire
	U8g2
    https://github.com/me-no-dev/ESPAsyncWebServer.git#master
    https://github.com/cpainchaud/rflink-webui.git#main
    jgromes/RadioLib @ ~5.6
    ;https://github.com/cpainchaud/RadioLib.git#master
    https://github.com/boblemaire/asyncHTTPrequest.git#master
    https://github.com/obones/rtl_433.git#RFLink32

ESP32_libs =
    Update

ESP8266_libs =
    ESP8266WiFi
    ESP8266TrueRandom

[ESP32_base]
platform = espressif32@6.1.0
;platform = espressif32                                                                       ; to try Latest espressif git
;platform_packages =                                                                             ; to try Latest espressif git
;    platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git    ; to try Latest espressif git

board = esp32dev
lib_deps =
	${common.ESPlibs}
    ${common.ESP32_libs}
board_build.filesystem = littlefs
debug_tool = esp-prog
debug_init_break = tbreak setup
monitor_filters = esp32_exception_decoder
board_build.partitions = partitions/esp32_4MB_LittleFS-327k.csv
build_src_filter = +<*> -<Plugins>

[ESP8266_base]
platform = espressif8266@4.1.0
lib_ignore = rtl_433 for RFLink32
lib_deps = ${common.ESPlibs}
           ${common.ESP8266_libs}
monitor_filters = esp8266_exception_decoder
build_src_filter = +<*> -<Plugins>


[env:genericESP32]
extends = ESP32_base
board = esp32dev
;upload_port=COM8
;monitor_port=COM8
upload_speed = 921600
build_flags =
    -D RFLINK_WIFI_ENABLED
;    -D RFLINK_MQTT_DISABLED
;    -D RFLINK_PORTAL_DISABLED
;    -D BOARD_HAS_PSRAM
;    -mfix-esp32-psram-cache-issue
;    -fconserve-stack
;    -D RFLINK_MQTT_DISABLED
;    -D RFLINK_PORTAL_DISABLED
;    -D RADIOLIB_DEBUG
;    -D RFLINK_SIGNAL_RSSI_DEBUG
;    -D DEBUG_RFLINK_CONFIG
;	 -D RFLINK_OTA_ENABLED
;	 -D RFLINK_OTA_PASSWORD='"'${sysenv.OTA_SEC}'"'
;    -D RFLINK_SERIAL2NET_DEBUG
;    -DCORE_DEBUG_LEVEL=5


[env:d1_mini]
extends = ESP8266_base
board = d1_mini
upload_speed = 921600
lib_deps = ${common.ESPlibs}
           ${common.ESP8266_libs}
build_flags =
    -D RFLINK_WIFI_ENABLED
    -D ARDUINOJSON_USE_LONG_LONG
;    -D RFLINK_MQTT_DISABLED
; disable SSL capabilities in PubSubClient to save memory
;     -D RFLINK_MQTT_CLIENT_SSL_DISABLED
;    -D RFLINK_PORTAL_DISABLED
;    -D RADIOLIB_DEBUG

[env:sonoff_bridge]   ; special for Sonoff RF Bridge
extends = ESP8266_base
board = esp8285
upload_speed = 921600
lib_deps = ${common.ESPlibs}
           ${common.ESP8266_libs}

lib_ignore = RadioLib
build_flags =
    -D TARGET_BOARD_ESP8285
    -D ARDUINOJSON_USE_LONG_LONG
    -D FIRMWARE_UPGRADE_VIA_WEBSERVER_DISABLED
    -D RFLINK_WIFI_ENABLED
    -D RFLINK_NO_RADIOLIB_SUPPORT
; strips out all the radio pin config code and saves memory
    -D RFLINK_USE_HARDCODED_RADIO_PINS_ONLY
;    -D RFLINK_MQTT_DISABLED
; disable SSL capabilities in PubSubClient to save memory
;     -D RFLINK_MQTT_CLIENT_SSL_DISABLED
;    -D RFLINK_PORTAL_DISABLED
;    -D RADIOLIB_DEBUG

;[env:nodemcuv2]
;platform = espressif8266
;board = nodemcuv2
;upload_speed = 256000
;lib_deps = ${common.ESPlibs}
;           ESP8266WiFi
;lib_ignore = ${common.OLEDlibs}
;upload_protocol = espota
;upload_port = 192.168.1.86

